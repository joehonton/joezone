var FS=require("fs"),Log=require("./log.class.js"),expect=require("./expect.function.js"),BinaryReader=require("./binary-reader.class.js");module.exports=class TextReader extends BinaryReader{constructor(){super(),Object.seal(this)}isBinary(){if(!this.isOpen())return null;var a=this.readOctet();if(-1==a)return null;for(var hasZero=!1,limit=1600;-1!=a&&limit>0&&0==hasZero;)0==(a=this.readOctet())&&(hasZero=!0),limit--;return this.initialize(),hasZero}readOctet(){if(this.bufferOffset>=this.bufferLength&&!this.readBlock())return-1;var octet=this.buffer[this.bufferOffset];return this.bufferOffset++,octet}getline(){if(!this.isOpen())return null;var a=this.readOctet();if(-1==a)return null;for(var octets=new Array;-1!=a;)if(13==a)a=this.readOctet();else{if(10==a)break;octets.push(a),a=this.readOctet()}return TextReader.octetsToUtf8(octets)}static octetsToUtf8(octets){expect(octets,"Array");for(let octet of octets)if(expect(octet,"Number"),octet<0||octet>255)return log.invalid("The array of octets must contain number between 0 and 255"),octets.join("");for(var c,char2,char3,out="",len=octets.length,i=0;i<len;)switch((c=octets[i++])>>4){case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:out+=String.fromCharCode(c);break;case 12:case 13:char2=octets[i++],out+=String.fromCharCode((31&c)<<6|(63&char2)<<0);break;case 14:char2=octets[i++],char3=octets[i++],out+=String.fromCharCode((15&c)<<12|(63&char2)<<6|(63&char3)<<0);break;case 15:char2=octets[i++],char3=octets[i++],octets[i++],out+="�";break;default:log.invalid("Poorly formed octet array, invalid UTF-8"),out+="�"}return out}};