var FS=require("fs"),expect=require("./expect.function.js"),Pfile=require("./pfile.class.js"),CRC32=require("./crc32.class.js"),BinaryReader=require("./binary-reader.class.js"),BinaryWriter=require("./binary-writer.class.js"),Log=require("./log.class.js");class CentralDirectoryRecord{constructor(){this.numberOfThisDisk=0,this.diskWhereCDRStarts=0,this.numberOfCDRthisDisk=0,this.totalNumberOfCDR=0,this.sizeOfCentralDirectory=0,this.offsetOfStartOfCentralDirectory=0,this.commentLength=0,this.comment=null,Object.seal(this)}writeEnd(bw){expect(bw,"BinaryWriter"),bw.writeUint32(101010256),bw.writeUint16(this.numberOfThisDisk),bw.writeUint16(this.diskWhereCDRStarts),bw.writeUint16(this.numberOfCDRthisDisk),bw.writeUint16(this.totalNumberOfCDR),bw.writeUint32(this.sizeOfCentralDirectory),bw.writeUint32(this.offsetOfStartOfCentralDirectory),bw.writeUint16(this.commentLength)}}class LocalFileHeader{constructor(filename,path,relativeOffset){if(expect(filename,["Pfile","String"]),expect(path,["Pfile","String"]),expect(relativeOffset,"Number"),"String"==filename.constructor.name&&(filename=new Pfile(filename)),"String"==path.constructor.name&&(path=new Pfile(path)),filename.exists()&&filename.isFile()){var crc32=new CRC32;crc32.computeFileCRC(filename),this.crc32Checksum=crc32.getResult(),this.compressedSize=filename.getFileSize(),this.uncompressedSize=this.compressedSize,this.setDateAndTime(filename.getModificationTime())}else this.crc32Checksum=0,this.compressedSize=0,this.uncompressedSize=0,this.fileModificationTime=0,this.fileModificationDate=0;""==path.name?this.filename=filename.getFilename():this.filename=path.addPath(filename.getFilename()).name,this.filenameLength=this.determineFilenameLength(this.filename),this.versionNeeded=20,this.bitFlags=2048,this.compressionMethod=0,this.extraFieldLength=0,this.extraField=null,this.versionMadeBy=788,this.fileCommentLength=0,this.fileComment=null,this.diskNumberStart=0,this.internalFileAttributes=1,this.externalFileAttributes=32,this.relativeOffsetOfLocalHeader=relativeOffset,this.sizeofLFH=30+this.filenameLength,this.sizeofCDR=46+this.filenameLength,Object.seal(this)}determineFilenameLength(str){expect(str,"String");var len=str.length;for(let i=str.length-1;i>=0;i--){var code=str.charCodeAt(i);code>127&&code<=2047?len++:code>2047&&code<=65535&&(len+=2),code>=56320&&code<=57343&&i--}return len}setDateAndTime(ts){expect(ts,"Date");var seconds=Math.floor(ts.getSeconds()/2),minutes=ts.getMinutes()+1;this.fileModificationTime=ts.getHours()*Math.pow(2,11)+minutes*Math.pow(2,5)+seconds;var year=ts.getFullYear()-1980,month=ts.getMonth()+1;this.fileModificationDate=year*Math.pow(2,9)+month*Math.pow(2,5)+ts.getDate()}writeLocalFileHeader(bw){expect(bw,"BinaryWriter"),bw.writeUint32(67324752),bw.writeUint16(this.versionNeeded),bw.writeUint16(this.bitFlags),bw.writeUint16(this.compressionMethod),bw.writeUint16(this.fileModificationTime),bw.writeUint16(this.fileModificationDate),bw.writeUint32(this.crc32Checksum),bw.writeUint32(this.compressedSize),bw.writeUint32(this.uncompressedSize),bw.writeUint16(this.filenameLength),bw.writeUint16(this.extraFieldLength),bw.writeText(this.filename)}writeCentralDirectoryFileHeader(bw){expect(bw,"BinaryWriter"),bw.writeUint32(33639248),bw.writeUint16(this.versionMadeBy),bw.writeUint16(this.versionNeeded),bw.writeUint16(this.bitFlags),bw.writeUint16(this.compressionMethod),bw.writeUint16(this.fileModificationTime),bw.writeUint16(this.fileModificationDate),bw.writeUint32(this.crc32Checksum),bw.writeUint32(this.compressedSize),bw.writeUint32(this.uncompressedSize),bw.writeUint16(this.filenameLength),bw.writeUint16(this.extraFieldLength),bw.writeUint16(this.fileCommentLength),bw.writeUint16(this.diskNumberStart),bw.writeUint16(this.internalFileAttributes),bw.writeUint32(this.externalFileAttributes),bw.writeUint32(this.relativeOffsetOfLocalHeader),bw.writeText(this.filename)}}module.exports=class{constructor(){this.bw=new BinaryWriter,this.headers=new Array,this.bytesWrittenSoFar=0,this.cdr=new CentralDirectoryRecord}create(zipFilename){expect(zipFilename,["String","Pfile"]),"String"==zipFilename.constructor.name&&(zipFilename=new Pfile(zipFilename)),zipFilename.exists()&&zipFilename.isFile()&&FS.unlinkSync(zipFilename.name),this.bw.open(zipFilename)}addFile(filename,path){if(expect(filename,["String","Pfile"]),expect(path,["String","Pfile"]),"String"==filename.constructor.name&&(filename=new Pfile(filename)),"String"==path.constructor.name&&(path=new Pfile(path)),filename.exists()&&filename.isFile())if(filename.isDirectory())log.abnormal(`Directories cannot be added to zip archive "${filename.name}"`);else try{var lfh=new LocalFileHeader(filename,path,this.bytesWrittenSoFar);lfh.writeLocalFileHeader(this.bw),this.headers.push(lfh);var br=new BinaryReader(filename);for(br.open(filename);br.readBlock();)this.bw.writeBlock(br.buffer,br.bufferLength);br.close(),this.bytesWrittenSoFar+=lfh.sizeofLFH+lfh.compressedSize,this.cdr.numberOfCDRthisDisk++,this.cdr.totalNumberOfCDR++,this.cdr.offsetOfStartOfCentralDirectory=this.bytesWrittenSoFar,this.cdr.sizeOfCentralDirectory+=lfh.sizeofCDR}catch(e){log.abnormal(e.message)}else log.abnormal(`File does not exist "${filename.name}", skipping`)}close(){for(let i=0;i<this.headers.length;i++)this.headers[i].writeCentralDirectoryFileHeader(this.bw);this.cdr.writeEnd(this.bw),this.bw.close()}};